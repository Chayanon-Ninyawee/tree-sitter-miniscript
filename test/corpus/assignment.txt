=========================
Assignment Statement
=========================

x = 10
name = "John"
flag = true
items = [1, 2, 3]
data = {"key": "value"}
result = a + b

---

(source_file
  (assignment_statement
    (variable (identifier))
    (literal (number)))
  (assignment_statement
    (variable (identifier))
    (literal (string content: (string_content))))
  (assignment_statement
    (variable (identifier))
    (literal (true)))
  (assignment_statement
    (variable (identifier))
    (list_constructor
      (literal (number))
      (literal (number))
      (literal (number))))
  (assignment_statement
    (variable (identifier))
    (map_constructor
      (pair
        key: (literal (string content: (string_content)))
        value: (literal (string content: (string_content))))))
  (assignment_statement
    (variable (identifier))
    (binary_expression
      left: (identifier)
      right: (identifier)))
)

===============================
Assignment Statement (Function)
===============================

empty_func = function()
end function

foo = function(n=1)
    print(n)
    print(n)
end function

test = function(); print("test"); end function

---

(source_file
  (assignment_statement
    (variable (identifier))
    (function_definition
      parameters: (parameters)))
  (assignment_statement
    (variable (identifier))
    (function_definition
      parameters: (parameters
        name: (identifier)
        default: (literal (number)))
      body: (block
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (identifier))))
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (identifier))))
      )))
  (assignment_statement
    (variable (identifier))
    (function_definition
      parameters: (parameters)
      body: (block
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (literal
                (string content: (string_content))))))
      )))
)
