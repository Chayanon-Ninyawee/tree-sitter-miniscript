==================
Jump Statement
==================

return
return 42
return "done"
break
continue

---

(source_file
  (return_statement)
  (return_statement
    (literal (number)))
  (return_statement
    (literal (string content: (string_content))))
  (break_statement)
  (continue_statement)
)

==================
If Statement - Simple If
==================

if x > 0 then
    print("positive")
end if

---

(source_file
  (if_statement
    condition: (binary_expression
      left: (identifier)
      right: (literal (number)))
    consequence: (block
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (literal (string content: (string_content))))))
    )
  )
)

==================
If Statement - If-Else
==================

if x == 0 then
    print("zero")
    print("zero")
else
    print("non-zero")
end if

---

(source_file
  (if_statement
    condition: (binary_expression
      left: (identifier)
      right: (literal (number)))
    consequence: (block
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (literal (string content: (string_content))))))
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (literal (string content: (string_content))))))
    )
    alternative: (else_statement
      consequence: (block
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (literal (string content: (string_content))))))
      )
    )
  )
)

==================
If Statement - If-Elseif-Else
==================

if x < 0 then
    print("negative")
else if x > 0 then
    print("positive")
else
    print("zero")
end if

---

(source_file
  (if_statement
    condition: (binary_expression
      left: (identifier)
      right: (literal (number)))
    consequence: (block
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (literal (string content: (string_content))))))
    )
    alternative: (elseif_statement
      condition: (binary_expression
        left: (identifier)
        right: (literal (number)))
      consequence: (block
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (literal (string content: (string_content)))))))
      )
    alternative: (else_statement
      consequence: (block
        (expression_statement
          (function_call
            name: (identifier)
            arguments: (arguments
              (literal (string content: (string_content))))))
      )
    )
  )
)

==================
If Shorthand Statement
==================

if true then print("true")

---

(source_file
  (if_statement_shorthand
    condition: (literal (true))
    consequence: (expression_statement
      (function_call
        name: (identifier)
        arguments: (arguments
          (literal (string content: (string_content))))))
  )
)

==================
For Statement
==================

for item in list
  print(item)
end for

---

(source_file
  (for_statement
    variable: (identifier)
    list: (identifier)
    body: (block
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (identifier))))
    )
  )
)

==================
While Statement
==================

while count < 10
  print(count)
end while

---

(source_file
  (while_statement
    condition: (binary_expression
      left: (identifier)
      right: (literal (number)))
    body: (block
      (expression_statement
        (function_call
          name: (identifier)
          arguments: (arguments
            (identifier))))
    )
  )
)

